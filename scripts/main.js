/**
 * Na캜te term칤ny z JSON souboru
 * @returns {Promise<Array>} Pole term칤n콢
 */
async function loadTerms() {
    try {
        const response = await fetch('data/terms.json');
        if (!response.ok) throw new Error('Soubor nebyl nalezen');
        return await response.json();
    } catch (error) {
        console.error('Chyba p콏i na캜칤t치n칤 term칤n콢:', error);
        showErrorToast('Nepoda콏ilo se na캜칤st slovn칤캜ek. Zkuste to pros칤m pozd캩ji.');
        return [];
    }
}

/**
 * Zobraz칤 v칳sledky vyhled치v치n칤
 * @param {Array} terms - Filtrovan칠 term칤ny k zobrazen칤
 */
function displayResults(terms) {
    const container = document.getElementById('results');
    if (!container) return;

    container.innerHTML = terms.length > 0 
        ? terms.map(createTermCard).join('')
        : '<div class="no-results">콯치dn칠 v칳sledky... Zkuste jin칳 term칤n</div>';
}

/**
 * Vytvo콏칤 HTML k칩d pro kartu term칤nu
 * @param {Object} term - Term칤n ze slovn칤ku
 * @returns {string} HTML k칩d
 */
function createTermCard(term) {
    return `
        <div class="term-card">
            <div class="term-header">
                ${term.term}
                <span class="term-category">${term.category}</span>
            </div>
            <div class="term-body">
                <p class="term-definition">${term.definition}</p>
                ${term.example ? `<div class="term-example">游늷 P콏칤klad: <em>${term.example}</em></div>` : ''}
                <button class="copy-btn" onclick="copyTermToClipboard(${JSON.stringify(term).replace(/"/g, '&quot;')})">
                    游늶 Kop칤rovat
                </button>
            </div>
        </div>
    `;
}

/**
 * Zkop칤ruje term칤n do schr치nky
 * @param {Object} term - Term칤n ke zkop칤rov치n칤
 */
function copyTermToClipboard(term) {
    const text = `${term.term} (${term.category}):\n${term.definition}${term.example ? `\n\nP콏칤klad: ${term.example}` : ''}`;
    
    navigator.clipboard.writeText(text)
        .then(() => showSuccessToast('Zkop칤rov치no do schr치nky!'))
        .catch(() => showErrorToast('Kop칤rov치n칤 se nepovedlo'));
}

/**
 * Zobraz칤 칰sp캩코nou notifikaci
 * @param {string} message - Zpr치va k zobrazen칤
 */
function showSuccessToast(message) {
    showToast(message, '#00ff88');
}

/**
 * Zobraz칤 chybovou notifikaci
 * @param {string} message - Zpr치va k zobrazen칤
 */
function showErrorToast(message) {
    showToast(message, '#ff4444');
}

/**
 * Obecn치 funkce pro zobrazen칤 notifikace
 * @param {string} message - Zpr치va
 * @param {string} color - Barva pozad칤
 */
function showToast(message, color) {
    const toast = document.createElement('div');
    toast.className = 'toast';
    toast.textContent = message;
    toast.style.backgroundColor = color;

    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 3000);
}

// Inicializace aplikace po na캜ten칤 str치nky
document.addEventListener('DOMContentLoaded', async () => {
    // Na캜ten칤 term칤n콢
    const terms = await loadTerms();
    
    // Nastaven칤 vyhled치v치n칤
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.addEventListener('input', (e) => {
            const query = e.target.value.toLowerCase();
            const filtered = terms.filter(term => 
                term.term.toLowerCase().includes(query) ||
                term.definition.toLowerCase().includes(query) ||
                term.category.toLowerCase().includes(query)
            );
            displayResults(filtered);
        });
    }

    // Po캜치te캜n칤 zobrazen칤 v코ech term칤n콢
    displayResults(terms);
});